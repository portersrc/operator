# Copyright Confidential Containers Contributors
#
# SPDX-License-Identifier: Apache-2.0
#
# Install docker on the host as it is used to build the operator.
#
---
# It assume that if docker is installed then it is proper configure so it
# doesn't do anything else. This is likely true when running on baremetal
# machines.
- name: Check docker is installed
  shell: command -v docker >/dev/null 2>&1
  register: docker_exist
  ignore_errors: yes
- name: Handle docker installation on Ubuntu 20.04
  block:
    - name: Install docker dependencies
      package:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
      retries: 3
      delay: 10
    - name: Add docker repo GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/trusted.gpg.d/docker.gpg
        state: present
      retries: 3
      delay: 10
    - name: Add docker repo
      apt_repository:
        repo: "deb [arch={{ target_arch }} signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        filename: docker
        update_cache: yes
        state: present
      retries: 3
      delay: 10
    - name: Install docker packages
      package:
        name:
          - containerd.io
          - docker-ce
          - docker-ce-cli
        state: present
      retries: 3
      delay: 10
    - name: Create the docker group
      group:
        name: docker
        state: present
        # TODO: add regular non-root users to docker group
  when: docker_exist.rc != 0 and ansible_distribution == "Ubuntu" and ansible_distribution_version == "20.04"
- name: Handle docker installation on Ubuntu 22.04
  block:
    - name: Install docker packages
      package:
        name:
          - docker.io
          - docker-buildx
        state: present
      retries: 3
      delay: 10
    - name: Create the docker group
      group:
        name: docker
        state: present
      retries: 3
      delay: 10
  when: docker_exist.rc != 0 and ansible_distribution == "Ubuntu" and ansible_distribution_version == "22.04"
- name: Handle docker installation on CentOS.
  block:
    - name: Install yum-utils
      dnf:
        name: yum-utils
        state: present
      retries: 3
      delay: 10
    - name: Add docker yum repo
      shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      args:
        creates: /etc/yum.repos.d/docker-ce.repo
      retries: 3
      delay: 10
    - name: Install docker packages
      dnf:
        name:
          - containerd.io
          - docker-ce
          - docker-ce-cli
        state: present
      retries: 3
      delay: 10
  when: docker_exist.rc != 0 and ansible_distribution == "CentOS"
#
# In order to prevent "systemd: docker.service Start request repeated too quickly"
#
- name: Set StartLimitBurst to 0 on Ubuntu for s390x
  block:
    - name: If a fragment path starts with `/lib`, then create /etc/systemd/system/docker.service.d
      block:
        - name: Get FragmentPath
          shell: systemctl show -p FragmentPath docker.service | awk -F'=' '{print $2}'
          register: fragment_path
        - name: Copy fragment file to /etc/systemd/system/docker.service.d
          copy:
            src: "{{ fragment_path.stdout }}"
            dest: "{{ fragment_path.stdout.replace('/lib', '/etc') }}"
          when: fragment_path.stdout.find('/lib') != -1
    - name: Configure `StartLimitBurst=0` in /etc/systemd/system/docker.service
      block:
        - name: Check if /etc/systemd/system/docker.service has StartLimitBurst=0
          shell: grep -q 'StartLimitBurst' /etc/systemd/system/docker.service
          register: start_limit_burst
          ignore_errors: yes
        - name: Replace a value of StartLimitBurst to 0
          lineinfile:
            path: /etc/systemd/system/docker.service
            regexp: '^StartLimitBurst='
            line: 'StartLimitBurst=0'
          when: start_limit_burst.rc == 0
        - name: Otherwise, insert `StartLimitBurst=0` just after a service section
          lineinfile:
            path: /etc/systemd/system/docker.service
            insertafter: '\[Service\]'
            line: 'StartLimitBurst=0'
          when: start_limit_burst.rc != 0
    - name: Reload systemd
      systemd:
        daemon_reload: yes
  when: ansible_distribution == "Ubuntu" and ansible_architecture == 's390x'
- name: Handle docker installation on Fedora 39
  block:
    - name: Install yum-utils
      dnf:
        name: yum-utils
        state: present
    - name: Add docker yum repo
      shell: yum-config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
      args:
        creates: /etc/yum.repos.d/docker-ce.repo
    - name: Install docker packages
      dnf:
        name:
          - containerd.io
          - docker-ce
          - docker-ce-cli
        state: present
  when: docker_exist.rc != 0 and ansible_distribution == "Fedora"
- name: Start docker service
  service:
    name: docker
    enabled: yes
    state: started
